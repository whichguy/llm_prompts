name: AgentWatch Main
# Maintains watch patterns in .github/agentwatch.yml on MAIN branch

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: write      # Required to update .github/agentwatch.yml on main
  pull-requests: write # Required to comment on PRs
  issues: write        # Required for issue comments

jobs:
  process-command:
    # INFINITE LOOP PROTECTION: Skip if triggered by github-actions bot
    if: |
      github.event_name == 'issue_comment' &&
      github.event.issue.pull_request && 
      contains(github.event.comment.body, '@agent-') &&
      github.event.comment.user.login != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Get PR details
        id: pr
        run: |
          PR_DATA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.issue.number }})
          echo "head_ref=$(echo "$PR_DATA" | jq -r .head.ref)" >> $GITHUB_OUTPUT
          echo "base_ref=$(echo "$PR_DATA" | jq -r .base.ref)" >> $GITHUB_OUTPUT
          echo "pr_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # CRITICAL: Checkout MAIN branch, not PR branch
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main  # Always work on main branch
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Python for YAML handling
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          
      - name: Install PyYAML
        run: pip install pyyaml
          
      - name: Process AgentWatch command
        id: process
        run: |
          cat > process_command.py << 'EOF'
          import yaml
          import json
          import sys
          import re
          import os
          from datetime import datetime
          
          comment = """${{ github.event.comment.body }}"""
          user = "${{ github.event.comment.user.login }}"
          pr_number = ${{ github.event.issue.number }}
          pr_branch = "${{ steps.pr.outputs.head_ref }}"
          
          config_file = ".github/agentwatch.yml"
          
          # INFINITE LOOP PROTECTION: Never watch agentwatch files
          PROTECTED_PATTERNS = [
              ".github/workflows/agentwatch*",
              ".github/agentwatch.yml",
              "**/agentwatch*"
          ]
          
          # Ensure .github directory exists
          os.makedirs(".github", exist_ok=True)
          
          # Load existing config or create new
          if os.path.exists(config_file):
              with open(config_file, 'r') as f:
                  config = yaml.safe_load(f) or {"version": 1, "watches": {}}
          else:
              config = {"version": 1, "watches": {}}
          
          # Initialize PR-specific watches if needed
          if "watches" not in config:
              config["watches"] = {}
          if pr_branch not in config["watches"]:
              config["watches"][pr_branch] = []
          
          # Parse command
          output = {"command": "unknown", "message": ""}
          
          # @agent-watch pattern agent @ args
          watch_match = re.search(r'@agent-watch\s+([^\s]+)\s+([^\s]+)(?:\s+@\s+(.+))?', comment)
          if watch_match:
              pattern = watch_match.group(1)
              agent = watch_match.group(2)
              args = watch_match.group(3) or ""
              
              # INFINITE LOOP PROTECTION
              is_protected = False
              for protected in PROTECTED_PATTERNS:
                  if protected in pattern or pattern in protected:
                      is_protected = True
                      break
              
              if is_protected:
                  output["message"] = f"❌ Cannot watch protected pattern: {pattern}"
                  output["command"] = "error"
              else:
                  # Check if this watch already exists for this PR
                  existing = None
                  for watch in config["watches"][pr_branch]:
                      if watch["pattern"] == pattern and watch["agent"] == agent:
                          existing = watch
                          break
                  
                  if existing:
                      # Update existing watch
                      existing["args"] = args
                      existing["updated_by"] = user
                      existing["updated_at"] = datetime.utcnow().isoformat() + "Z"
                      output["message"] = f"Updated existing watch: {pattern} -> {agent}"
                  else:
                      # Add new watch for this PR
                      config["watches"][pr_branch].append({
                          "pattern": pattern,
                          "agent": agent,
                          "args": args,
                          "added_by": user,
                          "added_at": datetime.utcnow().isoformat() + "Z",
                          "pr": pr_number
                      })
                      output["message"] = f"Added new watch: {pattern} -> {agent}"
                  
                  output["command"] = "watch"
                  output["pattern"] = pattern
                  output["agent"] = agent
                  output["args"] = args
                  
                  # Save config
                  with open(config_file, 'w') as f:
                      yaml.dump(config, f, default_flow_style=False, sort_keys=False)
          
          # @agent-unwatch agent pattern
          unwatch_match = re.search(r'@agent-unwatch\s+([^\s]+)\s+([^\s]+)', comment)
          if unwatch_match:
              agent = unwatch_match.group(1)
              pattern = unwatch_match.group(2)
              
              # Remove matching watch from this PR's watches
              if pr_branch in config["watches"]:
                  original_count = len(config["watches"][pr_branch])
                  config["watches"][pr_branch] = [w for w in config["watches"][pr_branch] 
                                      if not (w["pattern"] == pattern and w["agent"] == agent)]
                  
                  if len(config["watches"][pr_branch]) < original_count:
                      output["message"] = f"Removed watch: {pattern} -> {agent}"
                      # Save config
                      with open(config_file, 'w') as f:
                          yaml.dump(config, f, default_flow_style=False, sort_keys=False)
                  else:
                      output["message"] = f"No matching watch found: {pattern} -> {agent}"
              else:
                  output["message"] = f"No watches configured for PR branch: {pr_branch}"
              
              output["command"] = "unwatch"
              output["pattern"] = pattern
              output["agent"] = agent
          
          # @agent-list
          if "@agent-list" in comment:
              output["command"] = "list"
              pr_watches = config["watches"].get(pr_branch, [])
              output["watches"] = pr_watches
              output["message"] = f"Found {len(pr_watches)} active watches for PR #{pr_number}"
          
          # Output for GitHub Actions
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"command={output['command']}\n")
              f.write(f"message={output['message']}\n")
              if "pattern" in output:
                  f.write(f"pattern={output['pattern']}\n")
              if "agent" in output:
                  f.write(f"agent={output['agent']}\n")
              if "args" in output:
                  f.write(f"args={output['args']}\n")
              if "watches" in output:
                  f.write(f"watches={json.dumps(output['watches'])}\n")
          EOF
          
          python process_command.py
          
      # Commit to MAIN branch
      - name: Commit configuration changes to main
        if: steps.process.outputs.command == 'watch' || steps.process.outputs.command == 'unwatch'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .github/agentwatch.yml
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update AgentWatch configuration for PR #${{ steps.pr.outputs.pr_number }}
            
            Command: @agent-${{ steps.process.outputs.command }}
            Pattern: ${{ steps.process.outputs.pattern }}
            Agent: ${{ steps.process.outputs.agent }}
            Branch: ${{ steps.pr.outputs.head_ref }}
            Triggered by: @${{ github.event.comment.user.login }}
            
            [skip ci]"  # Skip CI to prevent infinite loops
            
            git push origin main
          fi
          
      - name: Trigger agent workflow
        if: steps.process.outputs.command == 'watch'
        run: |
          echo "Triggering ${{ steps.process.outputs.agent }} for pattern ${{ steps.process.outputs.pattern }}"
          
          # For prompt-expert, post the command (but not as github-actions bot)
          AGENT="${{ steps.process.outputs.agent }}"
          PATTERN="${{ steps.process.outputs.pattern }}"
          ARGS="${{ steps.process.outputs.args }}"
          
          # Create a dispatch event instead of comment to avoid loops
          if [ "$AGENT" = "promptexpert" ]; then
            echo "Would trigger prompt-expert workflow via dispatch"
            # gh workflow run prompt-expert.yml \
            #   -f pattern="$PATTERN" \
            #   -f args="$ARGS" \
            #   -f pr="${{ steps.pr.outputs.pr_number }}"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Post status comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const command = '${{ steps.process.outputs.command }}';
            const message = '${{ steps.process.outputs.message }}';
            const pattern = '${{ steps.process.outputs.pattern }}';
            const agent = '${{ steps.process.outputs.agent }}';
            const args = '${{ steps.process.outputs.args }}';
            
            let body = '';
            
            if (command === 'error') {
              body = message;  // Error message about protected patterns
            } else if (command === 'watch') {
              body = `✅ **AgentWatch Pattern Saved to Main**
              
              📁 **Pattern**: \`${pattern}\`
              🤖 **Agent**: ${agent}
              ⚙️ **Args**: ${args || 'none'}
              🌳 **Branch**: Monitoring PR #${{ steps.pr.outputs.pr_number }} (\`${{ steps.pr.outputs.head_ref }}\`)
              📝 **Config**: Updated \`.github/agentwatch.yml\` on \`main\` branch
              
              ${message}
              
              This pattern is now active. Use \`@agent-unwatch ${agent} ${pattern}\` to remove.`;
              
            } else if (command === 'unwatch') {
              body = `✅ **AgentWatch Pattern Removed from Main**
              
              ${message}
              
              📝 **Config**: Updated \`.github/agentwatch.yml\` on \`main\` branch`;
              
            } else if (command === 'list') {
              const watches = ${{ steps.process.outputs.watches || '[]' }};
              
              if (watches.length === 0) {
                body = `📋 **No Active AgentWatch Patterns for PR #${{ steps.pr.outputs.pr_number }}**
                
                Use \`@agent-watch <pattern> <agent> @ <args>\` to add patterns.`;
              } else {
                body = `📋 **Active AgentWatch Patterns for PR #${{ steps.pr.outputs.pr_number }}**\n\n`;
                watches.forEach((w, i) => {
                  body += `${i + 1}. **Pattern**: \`${w.pattern}\`\n`;
                  body += `   **Agent**: ${w.agent}`;
                  if (w.args) body += ` | **Args**: ${w.args}`;
                  body += `\n   **Added by**: @${w.added_by} on ${new Date(w.added_at).toLocaleDateString()}\n\n`;
                });
                body += `\n📝 Configuration stored in \`.github/agentwatch.yml\` on \`main\` branch`;
              }
            } else {
              body = `❌ **Unknown AgentWatch Command**
              
              Available commands:
              - \`@agent-watch <pattern> <agent> @ <args>\` - Add pattern
              - \`@agent-unwatch <agent> <pattern>\` - Remove pattern
              - \`@agent-list\` - List all patterns`;
            }
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
            
  # Process file changes when PR is updated
  check-patterns:
    if: |
      github.event_name == 'pull_request' &&
      github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
        
      - name: Check for watch patterns
        run: |
          if [ -f ".github/agentwatch.yml" ]; then
            echo "AgentWatch configuration found"
            
            PR_BRANCH="${{ github.event.pull_request.head.ref }}"
            echo "Checking patterns for PR branch: $PR_BRANCH"
            
            # Here we would:
            # 1. Load the YAML
            # 2. Check if there are patterns for this PR branch
            # 3. Match changed files against patterns
            # 4. Trigger appropriate agents via workflow_dispatch
          else
            echo "No AgentWatch configuration on main branch"
          fi