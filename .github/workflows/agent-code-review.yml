name: Agent - Code Review
on:
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string
      files:
        description: 'JSON array of matched files (optional)'
        required: false
        type: string
        default: '[]'

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Perform Code Review
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const prNumber = parseInt('${{ inputs.pr_number }}');
              const matchedFiles = JSON.parse('${{ inputs.files }}' || '[]');
              
              console.log(`Reviewing PR #${prNumber}`);
              console.log(`Matched files:`, matchedFiles);
              
              // Update label to running
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: 'agent:pending:code-review'
                });
              } catch (e) {
                console.log('Could not remove pending label:', e.message);
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['agent:running:code-review']
              });
              
              // Get PR details and files
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Filter to matched files if specified
              const filesToReview = matchedFiles.length > 0 
                ? files.filter(f => matchedFiles.includes(f.filename))
                : files;
              
              console.log(`Reviewing ${filesToReview.length} files`);
              
              // Build review comment
              let reviewBody = `## üîç Code Review Report\n\n`;
              reviewBody += `**Files Reviewed:** ${filesToReview.length}\n\n`;
              
              // Analyze each file
              for (const file of filesToReview) {
                reviewBody += `### \`${file.filename}\`\n`;
                reviewBody += `- **Status:** ${file.status}\n`;
                reviewBody += `- **Changes:** +${file.additions} / -${file.deletions}\n`;
                
                // Basic checks
                const checks = [];
                
                if (file.additions > 500) {
                  checks.push('‚ö†Ô∏è Large file - consider breaking into smaller modules');
                }
                
                if (file.filename.endsWith('.js') || file.filename.endsWith('.ts')) {
                  if (file.patch && file.patch.includes('console.log')) {
                    checks.push('üìù Contains console.log statements');
                  }
                  if (file.patch && file.patch.includes('TODO')) {
                    checks.push('üìå Contains TODO comments');
                  }
                }
                
                if (checks.length > 0) {
                  reviewBody += `- **Notes:**\n${checks.map(c => `  - ${c}`).join('\n')}\n`;
                } else {
                  reviewBody += `- **Notes:** ‚úÖ No issues found\n`;
                }
                
                reviewBody += '\n';
              }
              
              reviewBody += `### Summary\n`;
              reviewBody += `This is a placeholder code review agent. `;
              reviewBody += `In a production environment, this would perform:\n`;
              reviewBody += `- Static code analysis\n`;
              reviewBody += `- Security vulnerability scanning\n`;
              reviewBody += `- Code style checking\n`;
              reviewBody += `- Dependency analysis\n\n`;
              reviewBody += `---\n*Generated by Code Review Agent via AgentWatch*`;
              
              // Post review comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: reviewBody
              });
              
              console.log('Posted code review');
              
              // Update label to reviewed
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: 'agent:running:code-review'
                });
              } catch (e) {
                console.log('Could not remove running label:', e.message);
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                labels: ['agent:reviewed:code-review']
              });
              
              console.log('Code Review agent completed successfully');
              
            } catch (error) {
              console.error('Error in Code Review agent:', error);
              
              // Try to update label to error state
              try {
                const prNumber = parseInt('${{ inputs.pr_number }}');
                
                // Remove any existing agent labels
                const labelsToRemove = ['agent:pending:code-review', 'agent:running:code-review'];
                for (const label of labelsToRemove) {
                  try {
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      name: label
                    });
                  } catch (e) {}
                }
                
                // Add error label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['agent:error:code-review']
                });
                
                // Post error comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: `‚ùå **Code Review Agent Error**
                  
Error: ${error.message}

Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
                });
              } catch (labelError) {
                console.error('Could not update error state:', labelError);
              }
              
              core.setFailed(`Code Review agent failed: ${error.message}`);
            }