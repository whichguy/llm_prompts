name: AgentWatch Orchestrator
on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write  
  pull-requests: write

jobs:
  process-command:
    if: github.event.issue.pull_request && contains(github.event.comment.body, '@agent-')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install js-yaml minimatch
        
      - name: Process Command
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const yaml = require('js-yaml');
            const { execSync } = require('child_process');
            
            const comment = context.payload.comment.body;
            const match = comment.match(/@agent-(watch|unwatch|list)\s*(\S+)?\s*(.*)?/);
            
            if (!match) {
              console.log('No valid command found');
              return;
            }
            
            const command = match[1];
            const agent = match[2] || '';
            const pattern = match[3]?.trim() || '';
            const user = context.payload.comment.user.login;
            const prNumber = context.payload.issue.number;
            
            console.log(`Command: ${command}, Agent: ${agent}, Pattern: ${pattern}`);
            
            const configPath = '.github/agentwatch.yml';
            let config = { watchers: [] };
            
            try {
              const content = await fs.readFile(configPath, 'utf8');
              config = yaml.load(content) || { watchers: [] };
            } catch (e) {
              console.log('Config file not found, using default');
            }
            
            let message = '';
            let needsCommit = false;
            
            if (command === 'watch') {
              if (!agent || !pattern) {
                message = '‚ùå Usage: @agent-watch <agent-name> <file-pattern>';
              } else {
                const exists = config.watchers.some(w => 
                  w.agent === agent && w.pattern === pattern
                );
                
                if (!exists) {
                  config.watchers.push({
                    name: `${agent} for ${pattern}`,
                    agent: agent,
                    pattern: pattern,
                    exclude: [],
                    added_by: user,
                    added_at: new Date().toISOString(),
                    pr_number: prNumber
                  });
                  message = `‚úÖ Watcher added:\n- Agent: ${agent}\n- Pattern: ${pattern}\n- Excludes: []`;
                  needsCommit = true;
                } else {
                  message = `‚ö†Ô∏è Watcher already exists for ${agent} on ${pattern}`;
                }
              }
            } else if (command === 'unwatch') {
              if (!agent || !pattern) {
                message = '‚ùå Usage: @agent-unwatch <agent-name> <file-pattern>';
              } else {
                const index = config.watchers.findIndex(w => 
                  w.agent === agent && w.pattern === pattern
                );
                
                if (index !== -1) {
                  config.watchers.splice(index, 1);
                  message = `‚úÖ Watcher removed:\n- Agent: ${agent}\n- Pattern: ${pattern}`;
                  needsCommit = true;
                } else {
                  message = `‚ö†Ô∏è No watcher found for ${agent} on ${pattern}`;
                }
              }
            } else if (command === 'list') {
              if (config.watchers.length > 0) {
                message = 'üìã Active watchers:\n' + config.watchers.map((w, i) => 
                  `${i+1}. **${w.agent}** watching \`${w.pattern}\` (added by @${w.added_by})`
                ).join('\n');
              } else {
                message = 'üìã No active watchers';
              }
            }
            
            // Save config if needed
            if (needsCommit) {
              await fs.writeFile(configPath, yaml.dump(config));
              
              // Configure git
              execSync('git config user.name "github-actions[bot]"');
              execSync('git config user.email "github-actions[bot]@users.noreply.github.com"');
              
              // Commit and push
              execSync(`git add ${configPath}`);
              execSync(`git commit -m "Update agentwatch config: ${command} ${agent} ${pattern}"`);
              execSync('git push');
            }
            
            // Post response comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: message
            });