name: AgentWatch Auto Trigger
on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  actions: write

jobs:
  check-watchers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install js-yaml minimatch
        
      - name: Check and Run Agents
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs').promises;
            const yaml = require('js-yaml');
            const minimatch = require('minimatch');
            
            async function main() {
              try {
                console.log('=== AgentWatch Auto Trigger Started ===');
                console.log('Event:', context.eventName);
                console.log('PR Number:', context.payload.pull_request?.number);
                console.log('Repository:', `${context.repo.owner}/${context.repo.repo}`);
                
                // Validate PR context
                if (!context.payload.pull_request) {
                  console.log('No pull_request context - skipping');
                  return;
                }
                
                const prNumber = context.payload.pull_request.number;
                const prTitle = context.payload.pull_request.title;
                console.log(`Processing PR #${prNumber}: "${prTitle}"`);
                
                // Get changed files
                let files;
                try {
                  const response = await github.rest.pulls.listFiles({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: prNumber
                  });
                  files = response.data;
                  console.log(`Found ${files.length} changed file(s)`);
                } catch (error) {
                  console.error('ERROR: Failed to get changed files:', error.message);
                  core.setFailed(`Failed to get PR files: ${error.message}`);
                  return;
                }
                
                if (!files || files.length === 0) {
                  console.log('No files changed in this PR - skipping');
                  return;
                }
                
                const changedFiles = files.map(f => f.filename);
                console.log('Changed files:', changedFiles);
                
                // Load configuration
                let config = { watchers: [] };
                const configPath = '.github/agentwatch.yml';
                
                try {
                  const content = await fs.readFile(configPath, 'utf8');
                  config = yaml.load(content) || { watchers: [] };
                  console.log(`Loaded config with ${config.watchers?.length || 0} watcher(s)`);
                } catch (error) {
                  if (error.code === 'ENOENT') {
                    console.log('Config file not found - no watchers configured');
                  } else {
                    console.log('Config file error:', error.message);
                  }
                  return;
                }
                
                // Validate configuration
                if (!config.watchers || !Array.isArray(config.watchers) || config.watchers.length === 0) {
                  console.log('No watchers configured - skipping');
                  return;
                }
                
                // Process watchers and find matches
                const matchedAgents = new Map(); // agent -> matched files
                
                for (const watcher of config.watchers) {
                  if (!watcher.agent || !watcher.pattern) {
                    console.warn('Invalid watcher:', watcher);
                    continue;
                  }
                  
                  console.log(`Checking watcher: ${watcher.agent} with pattern: ${watcher.pattern}`);
                  
                  const matchedFiles = [];
                  for (const file of changedFiles) {
                    try {
                      // Clean pattern - remove quotes if present
                      const cleanPattern = watcher.pattern.replace(/^["']|["']$/g, '');
                      const isMatch = minimatch(file, cleanPattern);
                      
                      if (isMatch) {
                        // Check exclusions
                        let excluded = false;
                        if (Array.isArray(watcher.exclude)) {
                          for (const excludePattern of watcher.exclude) {
                            const cleanExclude = excludePattern.replace(/^["']|["']$/g, '');
                            if (minimatch(file, cleanExclude)) {
                              console.log(`  ${file} - excluded by: ${excludePattern}`);
                              excluded = true;
                              break;
                            }
                          }
                        }
                        
                        if (!excluded) {
                          console.log(`  ${file} - MATCHED`);
                          matchedFiles.push(file);
                        }
                      }
                    } catch (error) {
                      console.error(`Pattern matching error for ${file}:`, error.message);
                    }
                  }
                  
                  if (matchedFiles.length > 0) {
                    if (!matchedAgents.has(watcher.agent)) {
                      matchedAgents.set(watcher.agent, []);
                    }
                    matchedAgents.get(watcher.agent).push(...matchedFiles);
                    console.log(`Agent ${watcher.agent} matched ${matchedFiles.length} file(s)`);
                  }
                }
                
                if (matchedAgents.size === 0) {
                  console.log('No agents matched for this PR');
                  return;
                }
                
                console.log(`\nðŸŽ¯ ${matchedAgents.size} agent(s) will be triggered`);
                
                // Execute agents
                for (const [agent, files] of matchedAgents) {
                  console.log(`\nðŸ“¦ Triggering agent: ${agent}`);
                  
                  try {
                    // Add pending label
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      labels: [`agent:pending:${agent}`]
                    });
                    
                    // Dispatch to agent workflow if it exists
                    const workflowFile = `.github/workflows/agent-${agent}.yml`;
                    
                    try {
                      // Check if agent workflow exists
                      await github.rest.repos.getContent({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        path: workflowFile
                      });
                      
                      // Dispatch workflow
                      console.log(`Dispatching to ${workflowFile}`);
                      await github.rest.actions.createWorkflowDispatch({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        workflow_id: `agent-${agent}.yml`,
                        ref: context.payload.pull_request.head.ref,
                        inputs: {
                          pr_number: prNumber.toString(),
                          files: JSON.stringify(files)
                        }
                      });
                      
                    } catch (dispatchError) {
                      if (dispatchError.status === 404) {
                        console.log(`Agent workflow ${workflowFile} not found - executing inline`);
                        
                        // Execute inline for pr-summary agent
                        if (agent === 'pr-summary') {
                          await executePRSummaryAgent(github, context, prNumber, files);
                        } else {
                          console.log(`Unknown agent: ${agent} - skipping execution`);
                        }
                      } else {
                        throw dispatchError;
                      }
                    }
                    
                  } catch (error) {
                    console.error(`Error processing agent ${agent}:`, error.message);
                    
                    // Try to update label to error state
                    try {
                      await github.rest.issues.removeLabel({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: prNumber,
                        name: `agent:pending:${agent}`
                      });
                    } catch (e) {}
                    
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: prNumber,
                      labels: [`agent:error:${agent}`]
                    });
                  }
                }
                
                console.log('\nâœ… AgentWatch Auto Trigger completed');
                
              } catch (error) {
                console.error('FATAL ERROR:', error);
                core.setFailed(`AgentWatch Auto Trigger failed: ${error.message}`);
              }
            }
            
            // Inline PR Summary Agent implementation
            async function executePRSummaryAgent(github, context, prNumber, files) {
              console.log('Executing PR Summary agent inline');
              
              try {
                // Update label to running
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: 'agent:pending:pr-summary'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['agent:running:pr-summary']
                });
                
                // Get PR details
                const { data: pr } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                // Get file changes
                const { data: allFiles } = await github.rest.pulls.listFiles({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                // Calculate statistics
                let stats = {
                  filesChanged: allFiles.length,
                  additions: 0,
                  deletions: 0,
                  fileTypes: {}
                };
                
                for (const file of allFiles) {
                  stats.additions += file.additions;
                  stats.deletions += file.deletions;
                  
                  const ext = file.filename.split('.').pop();
                  stats.fileTypes[ext] = (stats.fileTypes[ext] || 0) + 1;
                }
                
                // Generate summary
                const fileTypesList = Object.entries(stats.fileTypes)
                  .map(([ext, count]) => `- .${ext}: ${count} file(s)`)
                  .join('\n');
                
                const summary = `## ðŸ“Š PR Summary Report

**Title:** ${pr.title}
**Author:** @${pr.user.login}
**Files Changed:** ${stats.filesChanged}
**Lines Added:** +${stats.additions}
**Lines Deleted:** -${stats.deletions}

### File Types
${fileTypesList}

### Files Matched by Watcher
${files.map(f => `- ${f}`).join('\n')}

---
*Generated by PR Summary Agent via AgentWatch*`;
                
                // Post comment
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  body: summary
                });
                
                // Update label to reviewed
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  name: 'agent:running:pr-summary'
                });
                
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: prNumber,
                  labels: ['agent:reviewed:pr-summary']
                });
                
                console.log('PR Summary agent completed');
                
              } catch (error) {
                console.error('PR Summary agent error:', error.message);
                throw error;
              }
            }
            
            // Execute main function
            await main();