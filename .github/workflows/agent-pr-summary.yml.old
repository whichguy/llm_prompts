name: Agent - PR Summary
on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: number

jobs:
  analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Get PR Details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });
            
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });
            
            core.setOutput('files', JSON.stringify(files));
            core.setOutput('pr_title', pr.title);
            core.setOutput('pr_body', pr.body || '');
            
      - name: Analyze Changes
        id: analyze
        run: |
          cat << 'EOF' > analyze.js
          const files = ${{ steps.pr.outputs.files }};
          
          let stats = {
            filesChanged: files.length,
            additions: 0,
            deletions: 0,
            fileTypes: {},
            todos: 0,
            fixmes: 0,
            breakingChanges: 0
          };
          
          for (const file of files) {
            stats.additions += file.additions;
            stats.deletions += file.deletions;
            
            const ext = file.filename.split('.').pop();
            stats.fileTypes[ext] = (stats.fileTypes[ext] || 0) + 1;
            
            if (file.patch) {
              const todos = (file.patch.match(/\+.*TODO/gi) || []).length;
              const fixmes = (file.patch.match(/\+.*FIXME/gi) || []).length;
              const breaking = (file.patch.match(/\+.*BREAKING CHANGE/gi) || []).length;
              
              stats.todos += todos;
              stats.fixmes += fixmes;
              stats.breakingChanges += breaking;
            }
          }
          
          console.log(JSON.stringify(stats));
          EOF
          
          echo "stats=$(node analyze.js)" >> $GITHUB_OUTPUT
          
      - name: Generate Summary
        uses: actions/github-script@v7
        with:
          script: |
            const stats = JSON.parse('${{ steps.analyze.outputs.stats }}');
            
            let riskLevel = 'Low';
            let riskFactors = [];
            
            if (stats.filesChanged > 10) {
              riskLevel = 'Medium';
              riskFactors.push('Large number of files changed');
            }
            
            if (stats.additions > 500) {
              riskLevel = 'High';
              riskFactors.push('Significant amount of new code');
            }
            
            if (stats.breakingChanges > 0) {
              riskLevel = 'High';
              riskFactors.push(`${stats.breakingChanges} breaking change(s) detected`);
            }
            
            if (stats.todos > 5 || stats.fixmes > 3) {
              if (riskLevel === 'Low') riskLevel = 'Medium';
              riskFactors.push('Multiple TODOs/FIXMEs added');
            }
            
            const fileTypesList = Object.entries(stats.fileTypes)
              .map(([ext, count]) => `- .${ext}: ${count} file(s)`)
              .join('\n');
            
            const summary = `## ðŸ“Š PR Summary Report
            
### Overview
**Title:** ${{ steps.pr.outputs.pr_title }}
**Files Changed:** ${stats.filesChanged}
**Lines Added:** +${stats.additions}
**Lines Deleted:** -${stats.deletions}

### File Types
${fileTypesList}

### Code Quality Markers
- **TODOs Added:** ${stats.todos}
- **FIXMEs Added:** ${stats.fixmes}
- **Breaking Changes:** ${stats.breakingChanges}

### Risk Assessment
**Risk Level:** ${riskLevel}
${riskFactors.length > 0 ? '\n**Risk Factors:**\n' + riskFactors.map(f => `- ${f}`).join('\n') : ''}

### Recommendations
${stats.todos > 0 ? '- Consider addressing TODOs before merging\n' : ''}${stats.fixmes > 0 ? '- FIXMEs should be resolved or tracked in issues\n' : ''}${stats.breakingChanges > 0 ? '- Ensure breaking changes are documented in release notes\n' : ''}${stats.filesChanged > 10 ? '- Consider breaking this PR into smaller, focused changes\n' : ''}${!stats.fileTypes['test'] && !stats.fileTypes['spec'] ? '- Add tests for new functionality\n' : ''}

---
*Generated by PR Summary Agent*`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ inputs.pr_number }},
              body: summary
            });